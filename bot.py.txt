import logging
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters,
                          CallbackQueryHandler, ContextTypes)
from pyrogram import Client

# --- Configuration ---
BOT_TOKEN = "7968927867:AAEnjXL5om9jp5dI2dJl3cCauN80q375Ov8"
API_ID = 20198876
API_HASH = "6e64c1a42045c06de5467a21e00b7d8c"
CHANNEL_USERNAME = -1002630738464  # private channel ID
FOLLOW_CHANNEL_LINK = "https://t.me/yourchannel"
LOG_CHANNEL_ID = -1002540017999

# --- Logging ---
logging.basicConfig(level=logging.INFO)

# --- Pyrogram client ---
pyro_client = Client("my_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# --- In-memory user tracker ---
greeted_users = set()

# --- Bot Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in greeted_users:
        greeted_users.add(user_id)
        keyboard = [[InlineKeyboardButton("Follow Channel", url=FOLLOW_CHANNEL_LINK)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("Welcome! Please follow our channel:", reply_markup=reply_markup)
        await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=f"üë§ New user started: {user_id}")
    else:
        await update.message.reply_text("Send me a movie name to search.")

async def search_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.lower()
    user_id = update.effective_user.id
    results = []

    async with pyro_client:
        async for message in pyro_client.search_messages(CHANNEL_USERNAME, query=query):
            if message.document or message.video:
                title = message.caption or "Movie Found"
                results.append((title[:50], str(message.id)))

    if not results:
        await update.message.reply_text("No matching movies found.")
        return

    keyboard = [[InlineKeyboardButton(text=title, callback_data=msg_id)] for title, msg_id in results[:10]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Select a movie:", reply_markup=reply_markup)
    await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=f"üîç User {user_id} searched for: '{query}'")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    message_id = int(query.data)

    async with pyro_client:
        msg = await pyro_client.get_messages(CHANNEL_USERNAME, message_ids=message_id)
        if msg:
            sent = await query.message.reply_document(
                document=msg.document or msg.video,
                caption="‚ö†Ô∏è This file will be deleted after 10 minutes."
            )
            await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=f"üì§ Sent file to user {user_id}: '{msg.caption or 'No Caption'}'")
            await asyncio.sleep(600)
            try:
                await sent.delete()
                await query.message.delete()
            except:
                pass

# --- Main Execution ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_movie))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()

if __name__ == '__main__':
    main()
